import { basename } from 'path'
import { BlobEntry } from '../blobs/entry'
import { PartitionProps } from '../blobs/props'

export const MAKEFILE_HEADER = `# Generated by adevtool; do not edit
# For more info, see https://github.com/kdrag0n/adevtool`
const CONT_SEPARATOR = ' \\\n    '

export interface Symlink {
  moduleName: string
  linkPartition: string
  linkSubpath: string
  targetPath: string
}

export interface ModulesMakefile {
  device: string
  vendor: string
  symlinks: Array<Symlink>
}

export interface ProductMakefile {
  namespaces?: Array<string>
  copyFiles?: Array<string>
  packages?: Array<string>
  props?: PartitionProps
  fingerprint?: string
}

export interface BoardMakefile {
}

export function sanitizeBasename(path: string) {
  return basename(path).replaceAll(/[^a-z0-9_\-.]/g, '_')
}

function partPathToMakePath(partition: string, subpath: string) {
  let copyPart = partition == 'system' ? 'PRODUCT_OUT' : `TARGET_COPY_OUT_${partition.toUpperCase()}`
  return `$(${copyPart})/${subpath}`
}

export function blobToFileCopy(entry: BlobEntry, proprietaryDir: string) {
  let destPath = partPathToMakePath(entry.partition, entry.path)
  return `${proprietaryDir}/${entry.srcPath}:${destPath}`
}

export function serializeModulesMakefile(makefile: ModulesMakefile) {
  let symlinkModules = makefile.symlinks.map(link => {
    let destPath = partPathToMakePath(link.linkPartition, link.linkSubpath)

    return `include $(CLEAR_VARS)
LOCAL_MODULE := ${link.moduleName}
LOCAL_MODULE_CLASS := FAKE
LOCAL_MODULE_TAGS := optional
LOCAL_MODULE_OWNER := ${makefile.vendor}
include $(BUILD_SYSTEM)/base_rules.mk
$(LOCAL_BUILT_MODULE): TARGET := ${link.targetPath}
$(LOCAL_BUILT_MODULE): SYMLINK := ${destPath}
$(LOCAL_BUILT_MODULE):
\t@mkdir -p $(dir $@)
\t@mkdir -p $(dir $(SYMLINK))
\t@rm -rf $@
\t@rm -rf $(SYMLINK)
\t$(hide) ln -sf $(TARGET) $(SYMLINK)
\t$(hide) touch $@`
  })

  return `${MAKEFILE_HEADER}

ifeq ($(TARGET_DEVICE),${makefile.device})

${symlinkModules.join('\n\n')}

endif
`
}

export function serializeProductMakefile(makefile: ProductMakefile) {
  let blocks = [MAKEFILE_HEADER]

  if (makefile.namespaces != undefined) {
    blocks.push(`PRODUCT_SOONG_NAMESPACES += \\
    ${makefile.namespaces.join(CONT_SEPARATOR)}`)
  }

  if (makefile.copyFiles != undefined) {
    blocks.push(`PRODUCT_COPY_FILES += \\
    ${makefile.copyFiles.join(CONT_SEPARATOR)}`)
  }

  if (makefile.packages != undefined) {
    blocks.push(`PRODUCT_PACKAGES += \\
    ${makefile.packages.join(CONT_SEPARATOR)}`)
  }

  if (makefile.props != undefined) {
    for (let [partition, props] of makefile.props.entries()) {
      let propLines = Array.from(props.entries()).map(([k, v]) => `${k}=${v}`)

      blocks.push(`PRODUCT_${partition.toUpperCase()}_PROPERTIES += \\
    ${propLines.join(CONT_SEPARATOR)}`)
    }
  }

  if (makefile.fingerprint != undefined) {
    blocks.push(`PRODUCT_OVERRIDE_FINGERPRINT += ${makefile.fingerprint}`)
  }

  return blocks.join('\n\n')
}

export function serializeBoardMakefile(makefile: BoardMakefile) {
  return `${MAKEFILE_HEADER}
`
}
